using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerScript : MonoBehaviour
{

    [Header("Player Movement")]
    public float movementSpeed = 2f;
    public float rotationSpeed = 10f;
    private CharacterController characterController;
    private Animator animator;

    [Header("Player Movement")]
    public float attackCooldown = 0.5f;
    private float lastAttackTime;
    public int attackDamage = 5;
    public string[] attackAnimations = { "Attack1", "Attack2", "Attack3", "Attack4" };
    public float dodgeDistance = 2f;
    public float attackRadius = 2f;
    public Transform[] opponents;



    void Awake()
    // Initialize Player Components
    {
        currentHealth = maxHealth;
        characterController = GetComponent<CharacterController>();
        animator = GetComponent<Animator>();
    }

    void Update()
    // Handle Player Movement and Actions
    {
        PerformMovement();
        PerformDodge();

        if (Input.GetKeyDown(KeyCode.J))
        {
            PerformAttack(0);
        }
        else if (Input.GetKeyDown(KeyCode.K))
        {
            PerformAttack(1);
        }
        else if (Input.GetKeyDown(KeyCode.N))
        {
            PerformAttack(2);
        }
        else if (Input.GetKeyDown(KeyCode.M))
        {
            PerformAttack(3);
        }
    }

    void PerformMovement()
    // Handle Player Movement based on Horizontal Input
    {
        float horizontalInput = Input.GetAxis("Horizontal");

        Vector3 movement = new Vector3(0, 0f, horizontalInput);

        if (movement != Vector3.zero)
        {
            Quaternion targetRotation = Quaternion.LookRotation(Vector3.forward);
            if (horizontalInput > 0)
                targetRotation = Quaternion.LookRotation(Vector3.forward);
            else if (horizontalInput < 0)
                targetRotation = Quaternion.LookRotation(Vector3.back);

            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);

            animator.SetFloat("MoveZ", horizontalInput);

            characterController.Move(movement.normalized * movementSpeed * Time.deltaTime);
        }
    }

    void PerformAttack(int attackIndex)
    // Perform an attack action based on the attack index
    {
        if (Time.time - lastAttackTime >= attackCooldown)
        {
            animator.Play(attackAnimations[attackIndex]);

            int damage = attackDamage;
            Debug.Log("Player attacks with: " + (attackIndex + 1) + " dealed " + damage + " damage.");

            lastAttackTime = Time.time;

            //Loop through each opponent and apply damage
            foreach (Transform opponent in opponents)
            {
                if (Vector3.Distance(transform.position, opponent.position) <= attackRadius)
                {
                    opponent.GetComponent<enemyScript>().StartCoroutine(opponent.GetComponent<enemyScript>().PlayHitDamageAnnimation(attackDamage));
                }
            }

        }
        else
        {
            Debug.Log("Attack is on cooldown. Please wait.");
        }
    }

    void PerformDodge()
    // Perform a dodge action when the player presses the 'Q' key
    {
        if (Input.GetKeyDown(KeyCode.Q))
        {
            animator.Play("Dodge");
            Vector3 dodgeDirection = -transform.forward * dodgeDistance;
            characterController.Move(dodgeDirection);
        }
    }

    void Die()
    {
        animator.Play("Die");
        // Disable player controls
        Debug.Log("Player has died.");
    }
}